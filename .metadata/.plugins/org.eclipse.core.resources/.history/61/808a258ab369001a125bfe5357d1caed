package mysql.database.com.register;

import java.awt.AlphaComposite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.nio.file.FileVisitOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

import javax.imageio.ImageIO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageConfig;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

@Service
public class RegisterService {
	private final String DIR = "C:\\QRCODE\\AllEmptyQrCodes";
    private final String ext = ".png";
    private final String LOGO = "file:\\e:\\desai2\\imagess.PNG";
    private final String CONTENT = "sub-1";
    private final int WIDTH = 500;
    private final int HEIGHT = 500;

	@Autowired
	private RegisterRepository registerRepo;
	
	
	public void newRegisteration(RegisterModel obj){
		registerRepo.save(obj);
	}
	
	public void updateRegisteration(RegisterModel obj,String id){
		registerRepo.save(obj);
	}
	
	public List<RegisterModel> show_allRegisteration(){
		List<RegisterModel> reg = new ArrayList<>();
		registerRepo.findAll().forEach(reg::add);
		return reg;
	}
	
	public Optional<RegisterModel> show_oneRegisteration(String id){
		return registerRepo.findById(id);
	}
	
	public void deleteRegisteration(String id){
		registerRepo.deleteById(id);
	}
	
	public void qrCodeGenerator(RegisterModel obj){
		
//		File f = new File("C:\\QRCODE");
//		if(!f.exists()) {
//			f.mkdir();
//		}
//		String profold="C:\\QRCODE\\";
//		String pfold=profold.concat("\\AllEmptyQrCodes\\");
//		File f1 = new File(pfold);
//		if(!f1.exists()) {
//			f1.mkdir();
//		}
//		
//
//	     
//	          // Create new configuration that specifies the error correction
//	          Map<EncodeHintType, ErrorCorrectionLevel> hints = new HashMap<>();
//	          hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
//
//	          QRCodeWriter writer = new QRCodeWriter();
//	          BitMatrix bitMatrix = null;
//	          ByteArrayOutputStream os = new ByteArrayOutputStream();
//
//	          try {
//	              // init directory
//	              cleanDirectory(DIR);
//	              initDirectory(DIR);
//	              // Create a qr code with the url as content and a size of WxH px
//	              bitMatrix = writer.encode(CONTENT, BarcodeFormat.QR_CODE, WIDTH, HEIGHT, hints);
//
//	              // Load QR image
//	              BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix, getMatrixConfig());
//
//	              // Load logo image
//	              BufferedImage overly = getOverly(LOGO);
//
//	              // Calculate the delta height and width between QR code and logo
//	              int deltaHeight = qrImage.getHeight() - overly.getHeight();
//	              int deltaWidth = qrImage.getWidth() - overly.getWidth();
//
//	              // Initialize combined image
//	              BufferedImage combined = new BufferedImage(qrImage.getHeight(), qrImage.getWidth(), BufferedImage.TYPE_INT_ARGB);
//	              Graphics2D g = (Graphics2D) combined.getGraphics();
//
//	              // Write QR code to new image at position 0/0
//	              g.drawImage(qrImage, 0, 0, null);
//	              g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));
//
//	              // Write logo into combine image at position (deltaWidth / 2) and
//	              // (deltaHeight / 2). Background: Left/Right and Top/Bottom must be
//	              // the same space for the logo to be centered
//	              g.drawImage(overly, (int) Math.round(deltaWidth / 2), (int) Math.round(deltaHeight / 2), null);
//
//	              // Write combined image as PNG to OutputStream
//	              ImageIO.write(combined, "png", os);
//	              // Store Image
//	              Files.copy( new ByteArrayInputStream(os.toByteArray()), Paths.get(DIR + generateRandoTitle(new Random(), 9) +ext), StandardCopyOption.REPLACE_EXISTING);
//
//	          } catch (WriterException e) {
//	              e.printStackTrace();
//	              //LOG.error("WriterException occured", e);
//	          } catch (IOException e) {
//	              e.printStackTrace();
//	              //LOG.error("IOException occured", e);
//	          }
//	      }
//
//	      private BufferedImage getOverly(String LOGO) throws IOException {
//	          URL url = new URL(LOGO);
//	          return ImageIO.read(url);
//	      }
//
//	      private void initDirectory(String DIR) throws IOException {
//	          Files.createDirectories(Paths.get(DIR));
//	      }
//
//	      private void cleanDirectory(String DIR) {
//	          try {
//	              Files.walk(Paths.get(DIR), FileVisitOption.FOLLOW_LINKS)
//	                      .sorted(Comparator.reverseOrder())
//	                      .map(Path::toFile)
//	                      .forEach(File::delete);
//	          } catch (IOException e) {
//	              // Directory does not exist, Do nothing
//	          }
//	      }
//
//	      private MatrixToImageConfig getMatrixConfig() {
//	          // ARGB Colors
//	          // Check Colors ENUM
//	          return new MatrixToImageConfig(RegisterService.Colors.WHITE.getArgb(), RegisterService.Colors.ORANGE.getArgb());
//	      }
//
//	      private String generateRandoTitle(Random random, int length) {
//	          return random.ints(48, 122)
//	                  .filter(i -> (i < 57 || i > 65) && (i < 90 || i > 97))
//	                  .mapToObj(i -> (char) i)
//	                  .limit(length)
//	                  .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
//	                  .toString();
//	      }
//
//	      public enum Colors {
//
//	          BLUE(0xFF40BAD0),
//	          RED(0xFFE91C43),
//	          PURPLE(0xFF8A4F9E),
//	          ORANGE(0xFFF4B13D),
//	          WHITE(0xFFFFFFFF),
//	          BLACK(0xFF000000);
//
//	          private final int argb;
//
//	          Colors(final int argb){
//	              this.argb = argb;
//	          }
//
//	          public int getArgb(){
//	              return argb;
//	          }
//	      
//		
//		
//		
//		
//		
//		File f = new File("C:\\QRCODE");
//		if(!f.exists()) {
//			f.mkdir();
//		}
//		String profold="C:\\QRCODE\\";
//		String pfold=profold.concat("\\AllEmptyQrCodes\\");
//		File f1 = new File(pfold);
//		if(!f1.exists()) {
//			f1.mkdir();
//		}
//		String ss="C:\\QRCODE\\AllEmptyQrCodes\\";
//		String qrCodeData="aa"; 
//		String filePath = ss.concat("\\").concat(qrCodeData).concat(".jpeg");
//		String charset = "UTF-8"; // or "ISO-8859-1"
//		Map hintMap1 = new HashMap();
//		hintMap1.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
//		createQRCode(qrCodeData, filePath, charset, hintMap1, 20, 20);
//		System.out.println("QR Code image of " + qrCodeData + " created successfully!");
//	}
//	
//	public void createQRCode(String qrCodeData, String filePath,
//			String charset, Map hintMap, int qrCodeheight, int qrCodewidth) {
//		BitMatrix matrix = null;
//		try {
//			matrix = new MultiFormatWriter().encode(
//					new String(qrCodeData.getBytes(charset), charset),
//					BarcodeFormat.QR_CODE, qrCodewidth, qrCodeheight, hintMap);
//		} catch (UnsupportedEncodingException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (WriterException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		try {
//			MatrixToImageWriter.writeToFile(matrix, filePath.substring(filePath
//					.lastIndexOf('.') + 1), new File(filePath));
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}
	
	
	public void demo2qrcodetext(){
		
		File f = new File("C:\\QRCODE");
		if(!f.exists()) {
			f.mkdir();
		}
		String profold="C:\\QRCODE\\";
		String pfold=profold.concat("\\AllEmptyQrCodes\\");
		File f1 = new File(pfold);
		if(!f1.exists()) {
			f1.mkdir();
		}
		

	     
	          // Create new configuration that specifies the error correction
	          Map<EncodeHintType, ErrorCorrectionLevel> hints = new HashMap<>();
	          hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);

	          QRCodeWriter writer = new QRCodeWriter();
	          BitMatrix bitMatrix = null;
	          ByteArrayOutputStream os = new ByteArrayOutputStream();

	          try {
	              // init directory
	              cleanDirectory(DIR);
	              initDirectory(DIR);
	              // Create a qr code with the url as content and a size of WxH px
	              bitMatrix = writer.encode(CONTENT, BarcodeFormat.QR_CODE, WIDTH, HEIGHT, hints);

	              // Load QR image
	              BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix, getMatrixConfig());

	              // Load logo image
	              BufferedImage overly = getOverly(LOGO);
	              Graphics g1 = overly.getGraphics();
	              g1.setFont(g1.getFont().deriveFont(30f));
	              g1.drawString("text", 100, 100);
	              g1.dispose();

	              // Calculate the delta height and width between QR code and logo
//	              int deltaHeight = qrImage.getHeight() - overly.getHeight();
//	              int deltaWidth = qrImage.getWidth() - overly.getWidth();
	              int deltaHeight = qrImage.getHeight();
	              int deltaWidth = qrImage.getWidth();

	              // Initialize combined image
	              BufferedImage combined = new BufferedImage(qrImage.getHeight(), qrImage.getWidth(), BufferedImage.TYPE_INT_ARGB);
	              Graphics2D g = (Graphics2D) combined.getGraphics();

	              // Write QR code to new image at position 0/0
	              g.drawImage(qrImage, 0, 0, null);
	              g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));

	              // Write logo into combine image at position (deltaWidth / 2) and
	              // (deltaHeight / 2). Background: Left/Right and Top/Bottom must be
	              // the same space for the logo to be centered
	              g.drawImage(overly, (int) Math.round(deltaWidth / 8), (int) Math.round(deltaHeight / 8), null);

	              // Write combined image as PNG to OutputStream
	              ImageIO.write(combined, "png", os);
	              // Store Image
	              Files.copy( new ByteArrayInputStream(os.toByteArray()), Paths.get(DIR + generateRandoTitle(new Random(), 9) +ext), StandardCopyOption.REPLACE_EXISTING);

	          } catch (WriterException e) {
	              e.printStackTrace();
	              //LOG.error("WriterException occured", e);
	          } catch (IOException e) {
	              e.printStackTrace();
	              //LOG.error("IOException occured", e);
	          }
	      }

	      private BufferedImage getOverly(String LOGO) throws IOException {
	          URL url = new URL(LOGO);
	          return ImageIO.read(url);
	      }

	      private void initDirectory(String DIR) throws IOException {
	          Files.createDirectories(Paths.get(DIR));
	      }

	      private void cleanDirectory(String DIR) {
	          try {
	              Files.walk(Paths.get(DIR), FileVisitOption.FOLLOW_LINKS)
	                      .sorted(Comparator.reverseOrder())
	                      .map(Path::toFile)
	                      .forEach(File::delete);
	          } catch (IOException e) {
	              // Directory does not exist, Do nothing
	          }
	      }

	      private MatrixToImageConfig getMatrixConfig() {
	          // ARGB Colors
	          // Check Colors ENUM
	          return new MatrixToImageConfig(RegisterService.Colors.BLACK.getArgb(), RegisterService.Colors.WHITE.getArgb());
	      }

	      private String generateRandoTitle(Random random, int length) {
	          return random.ints(48, 122)
	                  .filter(i -> (i < 57 || i > 65) && (i < 90 || i > 97))
	                  .mapToObj(i -> (char) i)
	                  .limit(length)
	                  .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
	                  .toString();
	      }

	      public enum Colors {

	          BLUE(0xFF40BAD0),
	          RED(0xFFE91C43),
	          PURPLE(0xFF8A4F9E),
	          ORANGE(0xFFF4B13D),
	          WHITE(0xFFFFFFFF),
	          BLACK(0xFF000000);

	          private final int argb;

	          Colors(final int argb){
	              this.argb = argb;
	          }

	          public int getArgb(){
	              return argb;
	          }
	      
		
		
		
		
		
//		File f = new File("C:\\QRCODE");
//		if(!f.exists()) {
//			f.mkdir();
//		}
//		String profold="C:\\QRCODE\\";
//		String pfold=profold.concat("\\AllEmptyQrCodes\\");
//		File f1 = new File(pfold);
//		if(!f1.exists()) {
//			f1.mkdir();
//		}
//		String ss="C:\\QRCODE\\AllEmptyQrCodes\\";
//		String qrCodeData="aa"; 
//		String filePath = ss.concat("\\").concat(qrCodeData).concat(".jpeg");
//		String charset = "UTF-8"; // or "ISO-8859-1"
//		Map hintMap1 = new HashMap();
//		hintMap1.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
//		createQRCode(qrCodeData, filePath, charset, hintMap1, 20, 20);
//		System.out.println("QR Code image of " + qrCodeData + " created successfully!");
	}
	
	public void createQRCode(String qrCodeData, String filePath,
			String charset, Map hintMap, int qrCodeheight, int qrCodewidth) {
		BitMatrix matrix = null;
		try {
			matrix = new MultiFormatWriter().encode(
					new String(qrCodeData.getBytes(charset), charset),
					BarcodeFormat.QR_CODE, qrCodewidth, qrCodeheight, hintMap);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WriterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			MatrixToImageWriter.writeToFile(matrix, filePath.substring(filePath
					.lastIndexOf('.') + 1), new File(filePath));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
